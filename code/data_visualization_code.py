# -*- coding: utf-8 -*-
"""data_visualization_code.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vY8mYT7DIlmC_3kI5UPfAQbU-_BLi8h6

# 필요한 라이브러리 및 데이터 불러오기
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import warnings

warnings.filterwarnings('ignore')

# 2017 데이터셋

data_2017 = pd.read_csv("/content/drive/MyDrive/건강보험공단_데이터/2017_진료내역정보.csv", encoding = 'cp949')

# 2018 데이터셋

data_2018 = pd.read_csv("/content/drive/MyDrive/건강보험공단_데이터/2018_진료내역정보(1).csv", encoding = 'cp949') #용량으로 인한 다운 발생 -> 한 파일만 사용

#2019 데이터 셋

data_2019 = pd.read_csv("/content/drive/MyDrive/건강보험공단_데이터/2019_진료내역정보(1).csv", encoding = 'cp949')

"""# 데이터 구조 파악"""

print(len(data_2017)) # 다른데이터보다 두배 많음 -> 행삭제
print(len(data_2018))
print(len(data_2019))

data_2017 = data_2017.loc[:4600000]

data_2017['요양개시일자'] = pd.to_datetime(data_2017['요양개시일자'])
data_2018['요양개시일자'] = pd.to_datetime(data_2018['요양개시일자'], format = '%Y%m%d')
data_2019['요양개시일자'] = pd.to_datetime(data_2019['요양개시일자'], format = '%Y%m%d')

data = pd.concat([data_2017, data_2018, data_2019], axis =0)

data = data.reset_index()

data = data.drop(['index'], axis = 1)

print(len(data))

data_2017.isnull().sum()

data_2018.isnull().sum()

data_2019.isnull().sum()

data.isnull().sum() # 가입자일련번호, 데이터기준일자 -> 컬럼명이 달라서 오류 발생

data



"""# 폰트 설정"""

!sudo apt-get install -y fonts-nanum
!sudo fc-cache -fv
!rm ~/.cache/matplotlib -rf

import matplotlib.font_manager as fm

font_list = fm.findSystemFonts(fontpaths = None, fontext = 'ttf')
font_list

"""# 상관관계 히트맵 시각화"""

# 상관관계 히트맵 시각화

df = data[['성별코드', '연령대코드', '시도코드', '요양개시일자', '진료과목코드', '요양일수', '입내원일수', '심결보험자부담금', '심결요양급여비용총액']].corr()

sns.set(font = 'NanumBarunGothic',rc={"axes.unicode_minus":False}, style='darkgrid')

sns.clustermap(df, annot = True, cmap = 'YlGnBu_r', vmin = -1, vmax =1)



"""# 요양개시일자에 따른 월별 심결보험자부담금 시계열 그래프 시각화"""

# 요양개시일자에 따른 월별 심결보험자부담금 시계열 그래프


day_df = data[['요양개시일자','심결보험자부담금']]

day_df = day_df.reset_index()

day_df = day_df.drop(['index'], axis = 1)

month_df = day_df.groupby(day_df['요양개시일자'].dt.strftime('%Y-%m')).mean()

plt.figure(figsize= (10,10))
plt.style.use('ggplot')
month_df.plot()
plt.title('월별 심결보험자부담금 시계열 그래프',fontproperties='NanumBarunGothic', fontsize = 20)
plt.grid(True)
plt.xlabel('요양개시일자(월별분류)', fontproperties='NanumBarunGothic', fontsize = 15)
plt.xticks(rotation = 0, fontsize = 13)
plt.gca().set_facecolor('#E6F0F8')
plt.rcParams['figure.figsize'] = (13 , 8)

plt.show()



"""# 연도별 심결보험자부담금 비교 시각화"""

# 연도별 심결보험자부담금 비교 시각화

year_df = day_df.groupby(day_df['요양개시일자'].dt.strftime('%Y')).mean()

plt.figure(figsize = (8,8))
bar = sns.barplot(data = year_df, x = year_df.index , y = '심결보험자부담금', palette= 'YlGnBu')
bar.set(xlabel = '요양개시연도', ylabel = '심결보험자부담금')
plt.gca().set_facecolor('white')
sns.set(font = 'NanumBarunGothic',rc={"axes.unicode_minus":False}, style='white')
plt.title("요양개시연도에 따른 심결보험자부담금 비교", fontsize = 15)



"""# 지역별 심결보험자부담금 평균 금액 시각화"""

# 지도시각화

data['시도코드'].value_counts()

provinces = []

for row in data['시도코드']:
  if row == 11 :
    provinces.append('Seoul')
  elif row == 26 :
    provinces.append('Busan')
  elif row == 27 :
    provinces.append('Daegu')
  elif row == 28 :
    provinces.append('Incheon')
  elif row == 29 :
    provinces.append('Gwangju')
  elif row == 30 :
    provinces.append('Daejeon')
  elif row == 31 :
    provinces.append('Ulsan')
  elif row == 36 :
    provinces.append('Sejongsi')
  elif row == 41 :
    provinces.append('Gyeonggi-do')    
  elif row == 42 :
    provinces.append('Gangwon-do')
  elif row == 43 :
    provinces.append('Chungcheongbuk-do')
  elif row == 44 :
    provinces.append('Chungcheongnam-do')
  elif row == 45 :
    provinces.append('Jeollabuk-do')
  elif row == 46 :
    provinces.append('Jeollanam-do')
  elif row == 47 :
    provinces.append('Gyeongsangbuk-do')
  elif row == 48 :
    provinces.append('Gyeongsangnam-do')
  else :
    provinces.append('Jeju-do')

data['provinces'] = provinces

data['provinces'].value_counts()

province_data = data[['provinces','심결보험자부담금']]

mean_province = province_data.groupby(province_data['provinces']).mean()

[mean_province.index]

import folium
import json
import webbrowser

geo = json.load(open('/content/drive/MyDrive/건강보험공단_데이터/skorea-provinces-2018-geo.json', encoding = 'utf-8'))

map = folium.Map(location = [35.8, 127.6], tiles = 'OpenStreetMap', zoom_start = 8)

folium.Choropleth(
    geo_data = geo,
    data = mean_province,
    columns = (mean_province.index, '심결보험자부담금'),
    key_on='feature.properties.name_eng',
    fill_color='YlGn'
).add_to(map)

map



"""# 요양일수에 따른 심결보험자부담금 산점도 시각화"""

# 요양일수에 따른 심결보험자부담금 산점도 시각화

data['요양일수'].value_counts()

pd.options.display.float_format = '{:.5f}'.format

# 요양일수 그룹별로 묶어서 심결보험자부담금 평균구하기

care_day = data.groupby('요양일수').mean()

care_day =care_day.reset_index()

plt.figure(figsize=(10,10))
plt.scatter(care_day['요양일수'], care_day['심결보험자부담금'], color = 'red')
plt.gca().set_facecolor('#E6F0F8')

plt.xlabel('요양일수')
plt.ylabel('심결보험자부담금')
plt.title("요양일수에 따른 심결보험자부담금 변화 산점도", fontsize = 15)
plt.show()



"""# 심결보험자부담금 지출 상위 10개 진료과목 시각화"""

# 상위 10개 진료과목 시각화

data.dtypes

data['진료과목코드'] = data['진료과목코드'].astype('int')

subject_mean = data.groupby('진료과목코드').mean()

subject_mean = subject_mean.reset_index()

subject_mean[['진료과목코드', '심결보험자부담금']].sort_values(by = '심결보험자부담금')

head_subject_mean = subject_mean[['진료과목코드','심결보험자부담금']].sort_values(by = '심결보험자부담금', ascending = False).head(10)

head_subject_mean.insert(2, '진료과목명', ['병리과', '한방내과', '흉부외과', '방사선종양학과', '구강악안면외과', '재활의학과', '성형외과', '결핵과', '신경외과', '외과'])

# 상위 보험금 10개 진료과목 막대그래프

colors = ['#ff9999', '#ffc000', '#8fd9b6', '#d395d0', '#C2DAB8', '#C1CADE', '#9FC3E9', '#E9DADA', '#E4ADC8', '#AFDDFF', '#EDE7F6', '#FFCDD2', '#CFD8DC']

plt.figure(figsize = (10,10))
plt.bar(head_subject_mean['진료과목명'], head_subject_mean['심결보험자부담금'], color = colors)
plt.gca().set_facecolor('#E6F0F8')
plt.title('심결보험자부담금 상위 10개 진료과목 막대그래프', fontsize = 15)
plt.xticks(rotation = 30)
plt.show()



"""# 진료과목별 건수 비율 파이차트 시각화"""

# 진료과목 건수 비율 파이차트 시각화

subject_count =pd.DataFrame(data['진료과목코드'].value_counts())
subject_count=subject_count.reset_index()

subject_count = subject_count.sort_values(by = 'index')

subject_count.insert(2, '진료과목명', ['일반의', '내과', '신경과', '정신과', '외과', '정형외과', '신경외과', '흉부외과', '성형외과', '마취통증의학과', '산부인과', '소아청소년과', '안과','이비인후과', '피부과', '비뇨기과',
                                   '영상의학과','방사선종양학과', '병리과', '진단검사의학과','결핵과','재활의학과', '핵의학과', 
                                   '가정의학과', '응급의학과', '산업의학과', '예방의학과', '구강악안면외과', '치과보존과', '구강내과', '한방내과', '침구과', '한방재활의학과'])

subject_count = subject_count.rename(columns = {'진료과목코드':'count'})

subject_count = subject_count.sort_values(by = 'count', ascending = False)

subject_count.head()

subject_count.iloc[:12]

subject_count_a =subject_count.iloc[12:]

subject_count_a.insert(3, '합치기', 1)

add_df = subject_count_a.groupby('합치기').sum()

add_df.insert(2, '진료과목명', '기타')

add_df

subject_count_b =subject_count.iloc[:12]

pie_df = pd.concat([subject_count_b, add_df])

pie_df

wedgeprops={'width': 0.7, 'edgecolor': 'w', 'linewidth': 5}

#colors = ['#ff9999', '#ffc000', '#8fd9b6', '#d395d0']
colors = ['#ff9999', '#ffc000', '#8fd9b6', '#d395d0', '#C2DAB8', '#C1CADE', '#9FC3E9', '#E9DADA', '#E4ADC8', '#AFDDFF', '#EDE7F6', '#FFCDD2', '#CFD8DC']
plt.figure(figsize = (10,10))
plt.pie(pie_df['count'], labels = pie_df['진료과목명'],autopct = '%1.1f%%', startangle = 45, wedgeprops=wedgeprops, colors = colors)
plt.title("진료과목별 건수 비율", fontsize = 15)
plt.show()



"""# K-eans clustering을 통한 진료과목 그룹 분류
- 변수 : 심결보험자부담금, 요양일수
"""

# k-means clustering 시각화

import seaborn as sns
import scipy
import scipy.cluster.hierarchy as sch

subject_mean = data.groupby('진료과목코드').mean()

subject_mean = subject_mean.reset_index()

subject_cluster = subject_mean[['진료과목코드', '심결보험자부담금', '요양일수']].sort_values(by = '진료과목코드')

subject_cluster.insert(3, '진료과목명', ['일반의', '내과', '신경과', '정신과', '외과', '정형외과', '신경외과', '흉부외과', '성형외과', '마취통증의학과', '산부인과', '소아청소년과', '안과','이비인후과', '피부과', '비뇨기과',
                                   '영상의학과','방사선종양학과', '병리과', '진단검사의학과','결핵과','재활의학과', '핵의학과', 
                                   '가정의학과', '응급의학과', '산업의학과', '예방의학과', '구강악안면외과', '치과보존과', '구강내과', '한방내과', '침구과', '한방재활의학과'])

subject_cluster = subject_cluster.set_index('진료과목명')

subject_cluster = subject_cluster.drop(['진료과목코드'], axis = 1)

subject_cluster.head()

# 적절한 군집 수 찾기
from sklearn.cluster import KMeans

k_cluster = range(1, 10)
inertia = []

for k in k_cluster :
  model = KMeans(n_clusters = k)
  model.fit(subject_cluster)
  inertia.append(model.inertia_)

plt.figure(figsize = (7, 7))
plt.plot(k_cluster, inertia, '-o')
plt.xlabel("number_of_clusters")
plt.ylabel("inertia")
plt.show()

# k = 4 클러스터
from sklearn.cluster import KMeans

cluster_model = KMeans(n_clusters = 4)
pred = cluster_model.fit_predict(subject_cluster)

plt.figure(figsize = (8,8))
sns.scatterplot(subject_cluster['요양일수'], subject_cluster['심결보험자부담금'],
                hue= pred, palette = 'Set2', s=150)
plt.xlabel("요양일수")
plt.ylabel("심결보험자부담금")
plt.title("진료과목 K-means Clustering 시각화", fontsize = 15)

# 범례달기

plt.show()

# 결과 확인

result_cluster = subject_cluster.copy()
result_cluster['cluster'] = cluster_model.labels_
result_cluster.sort_values(by = 'cluster')

result_cluster['cluster'].value_counts()



"""# 성별과 연령에 따른 심결보험자부담금 비교 시각화"""

# 성별과 연령에 따른 심결보험자부담금 비교 시각화

age_data = data.copy()

df = age_data[['연령대코드','성별코드', '심결보험자부담금']]

age_gender = df.groupby(['연령대코드', '성별코드']).mean()

age_gender = age_gender.reset_index()

age_condition = [
                 (age_gender['연령대코드'] == 1)|(age_gender['연령대코드'] == 2),
                 (age_gender['연령대코드'] == 3)|(age_gender['연령대코드'] == 4),
                 (age_gender['연령대코드'] == 5)|(age_gender['연령대코드'] == 6),
                 (age_gender['연령대코드'] == 7)|(age_gender['연령대코드'] == 8),
                 (age_gender['연령대코드'] == 9)|(age_gender['연령대코드'] == 10),
                 (age_gender['연령대코드'] == 11)|(age_gender['연령대코드'] == 12),
                 (age_gender['연령대코드'] == 13)|(age_gender['연령대코드'] == 14),
                 (age_gender['연령대코드'] == 15)|(age_gender['연령대코드'] == 16),
                 (age_gender['연령대코드'] == 17)|(age_gender['연령대코드'] == 18)
              
]
age_list = ['0세~9세', '10대', '20대', '30대', '40대', '50대', '60대', '70대', '80세 이상']


age_gender['연령대'] = np.select(age_condition, age_list)

gender_condition = [
                    (age_gender['성별코드'] == 1),
                    (age_gender['성별코드'] == 2)
]

gender_list = ['남성', '여성']

age_gender['성별'] = np.select(gender_condition, gender_list)

age_gender.head()

ag_df = age_gender.groupby(['연령대', '성별']).mean()

ag_df = ag_df.drop(['연령대코드', '성별코드'], axis = 1)

ag_df = ag_df.reset_index()

ag_df

# 시각화

colors = ['#64B5F6', '#FF66A9']

plt.figure(figsize = (10,10))
sns.set(font = 'NanumBarunGothic',rc={"axes.unicode_minus":False}, style='darkgrid')
plt.gca().set_facecolor('#E6F0F8')
sns.barplot(data = ag_df, x = '연령대', y = '심결보험자부담금', hue = '성별', palette= colors)
plt.title('연령대와 성별에 따른 심결보험자부담금 막대그래프', fontsize = 16)



"""# 덴드로그램을 통한 집단 구분 시각화
- 변수 : 연령대코드, 성별코드, 심결보험자보담금, 요양일수
"""

# 덴드로그램 시각화

den_df = data[['연령대코드', '성별코드', '심결보험자부담금', '요양일수']]

group_den = den_df.groupby(['연령대코드', '성별코드']).mean()

group_den=group_den.reset_index()

group_den

# 덴드로그램
from scipy.cluster.hierarchy import linkage, dendrogram

clusters = linkage(y = group_den, method = 'complete', metric = 'euclidean')

clusters.shape

# 주로 연령대에 영향 받는 듯

plt.figure(figsize = (15, 10))
dendrogram(clusters, leaf_rotation = 90, leaf_font_size= 10)
plt.show()



"""# 2019년 데이터의 심결보험자부담금 분해시계열 그래프 시각화"""

# 2019년데이터로 분해시계열 그래프 그리기(용량 너무커서 일년 데이터만 사용)

df_2019_1 = pd.read_csv("/content/drive/MyDrive/건강보험공단_데이터/2019_진료내역정보(1).csv", encoding = 'cp949')
df_2019_2 = pd.read_csv("/content/drive/MyDrive/건강보험공단_데이터/2019_진료내역정보(2).csv", encoding = 'cp949')
df_2019_3 = pd.read_csv("/content/drive/MyDrive/건강보험공단_데이터/2019_진료내역정보(3).csv", encoding = 'cp949')

df_2019 = pd.concat([df_2019_1, df_2019_2, df_2019_3])

df_2019.dtypes

df_2019['요양개시일자'] = pd.to_datetime(df_2019['요양개시일자'], format = '%Y%m%d')

ts_df = df_2019[['요양개시일자', '심결보험자부담금']]

ts_df.dtypes

pd.options.display.float_format = '{:.5f}'.format

group_ts = ts_df.groupby('요양개시일자').mean()

group_ts

# 시계열 그래프

from statsmodels.tsa.seasonal import seasonal_decompose
from dateutil.parser import parse

# 곱하기 분해
result_mul = seasonal_decompose(group_ts['심결보험자부담금'], model = 'multiplicative',  extrapolate_trend='freq')

plt.rcParams.update({'figure.figsize': (12,8)})
result_mul.plot()
plt.show()



